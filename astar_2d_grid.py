# -*- coding: utf-8 -*-
"""Astar_2D_grid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15dgCzWV87okvKN0ApEuji_GZL8NtGo9G
"""

import heapq

class Cell(object):
    def __init__(self, x, y, reachable):
        # Initialize new cell and their x and y coordinates 
        self.reachable = reachable
        self.x = x
        self.y = y
        self.parent = None
        self.g = 0
        self.h = 0
        self.f = 0

    def __lt__(self, other):
        return self.f < other.f

class AStar(object):
    def __init__(self):
        self.opened = []
        heapq.heapify(self.opened)
        self.closed = set()
        self.cells = []
        self.grid_height = None #5
        self.grid_width = None #5

    def init_grid(self, width, height, obst, start, end):
        # Creating grid cells and Ostacle.
        self.grid_height = height
        self.grid_width = width
        for x in range(self.grid_width):
            for y in range(self.grid_height):
                if (x, y) in obst:
                    reachable = False
                else:
                    reachable = True
                self.cells.append(Cell(x, y, reachable))
        self.start = self.get_cell(*start)
        self.end = self.get_cell(*end)

    def get_heuristic(self, cell):
        # The heuristic value H for a cell.
        return 10 * (abs(cell.x - self.end.x) + abs(cell.y - self.end.y))

    def get_cell(self, x, y):
        return self.cells[x * self.grid_height + y]

    def get_adjacent_cells(self, cell):
        # Returns adjacent cells to a cell in Clockwise from the one on right.
        cells = []
        if cell.x < self.grid_width - 1:
            cells.append(self.get_cell(cell.x + 1, cell.y))
        if cell.y > 0:
            cells.append(self.get_cell(cell.x, cell.y - 1))
        if cell.x > 0:
            cells.append(self.get_cell(cell.x - 1, cell.y))
        if cell.y < self.grid_height - 1:
            cells.append(self.get_cell(cell.x, cell.y + 1))
        return cells

    def get_path(self):
        cell = self.end
        path = [(cell.x, cell.y)]
        while cell.parent is not self.start:
            cell = cell.parent
            path.append((cell.x, cell.y))
        path.append((self.start.x, self.start.y))
        path.reverse()
        print('Estimated path of Robot : ', path)
        return path

    def update_cell(self, adj, cell):
        # Updating adjacent cell to the current cell with cost of 10
        adj.g = cell.g + 10
        adj.h = self.get_heuristic(adj)
        adj.parent = cell
        adj.f = adj.h + adj.g

    def solve(self):
        # Find path to Ending/Goal cell
        # adding start cell to open heap queue
        heapq.heappush(self.opened, (self.start.f, self.start))
        while len(self.opened):
          # EXploring cells from the open list
            f, cell = heapq.heappop(self.opened)
            # Adding visited cell to closed Tuple set
            self.closed.add(cell)
            if cell is self.end:
                return self.get_path()
            # Getting adjacent cells for the current cell
            adj_cells = self.get_adjacent_cells(cell)
            for adj_cell in adj_cells:
              # Exploring the new adj cell 
                if adj_cell.reachable and adj_cell not in self.closed:
                    if (adj_cell.f, adj_cell) in self.opened:
                        # checking if current path is better than the one previously found
                        if adj_cell.g > cell.g + 10:
                            self.update_cell(adj_cell, cell)
                    else:
                        self.update_cell(adj_cell, cell)
                        heapq.heappush(self.opened, (adj_cell.f, adj_cell))

if __name__ == "__main__":
  a = AStar()
    # Locating the Black Obstacles in the Grid Environment
  obst = ((1, 0), (0, 2), (0, 4), (2, 2), (2, 4), (3, 0), (3, 2), (4, 3))
  a.init_grid(5, 5, obst, (0, 0), (4, 4))
  path = a.solve()
  print("Path of the Robot : ", path)



